#!/usr/bin/env bash

# set -x

__lamp__help() {
  cat <<EOF
Usage: lamp [command] [options]

Commands:
  create <domain> <options>  Create a virtual host for domain.
    -D, --database <database> Create a database. Default: <domain> without TLD.
    -P, --php <version>       Enable PHP version. Default: __PHP_VERSION__

  delete <domain> <options>  Delete the virtual host for domain.
    -D, --database <database> Delete the database. Default: <domain> without TLD.

  enable  <domain>           Enable virtual host for domain.
  disable  <domain>          Disable virtual host for domain.

  list                       List the generated virtual hosts.

  restart <services>         Restart all services or service if defined.
                             The 'php' o 'php-fpm' name restarts all PHP-FPM versions.
                             Use the 'phpX.X-fpm' to restart a specific version
                             where X.X is a valid version.
                             Default: php apache2 mariadb mailpit coredns

  help                       Show this help message.
EOF
  exit 0
}

__lamp__list() {
  find /etc/apache2/sites-available -maxdepth 1 -name "*.conf" 2>/dev/null |
    awk -F'/' '
    BEGIN { nlen = 30 }
    {
      conf = $NF
      status = "DISABLED"
      if (system("test -f /etc/apache2/sites-enabled/" conf) == 0) {
        status = "ENABLED"
      }
      vhost = substr(conf, 1, length(conf) - 5)
      len = length(vhost)
      if (len > nlen) {
        nlen = len
      }
      vhosts[NR] = vhost
      statuses[NR] = status
    }
    END {
    if (NR == 0) {
      print "No domain found."
      exit 1
    }
    if (nlen >= 30) {
      nlen += 2
    }
    printf "%-*s %s\n", nlen, "DOMAIN", "STATUS"
    for (i=1; i<=NR; i++) {
      printf "%-*s %s\n", nlen, vhosts[i], statuses[i]
    }
  }'
  exit 0
}

__lamp__restart() {
  local name services=()
  local exit_code=0
  while [[ $# -gt 0 ]]; do
    case "$1" in
    php | php-fpm)
      for name in /etc/php/*; do
        services+=("php${name##*/}-fpm")
      done
      ;;
    *) services+=("$1") ;;
    esac
    shift
  done

  for name in "${services[@]}"; do
    echo "Restarting the $name service."
    if ! systemctl restart "$name" >/dev/null 2>&1; then
      exit_code=$?
      echo "Failed to restart the $name service. Check the logs."
    fi
  done
  return $exit_code
}

__lamp__restart_server() {
  if ! __lamp__restart "php" "apache2" >/dev/null 2>&1; then
    echo "Failed to restart the server services, check the logs."
  fi
}

__lamp__enable() {
  local domain="$1"
  if [[ ! -f "/etc/apache2/sites-available/$domain.conf" ]]; then
    echo "The \"$domain\" virtual host not exists."
    return
  fi
  if [[ -f "/etc/apache2/sites-enabled/$domain.conf" ]]; then
    echo "The \"$domain\" virtual host is already enabled."
    return
  fi
  ln -s "/etc/apache2/sites-available/$domain.conf" "/etc/apache2/sites-enabled/$domain.conf"
  echo "The \"$domain\" virtual host is enabled."
  __lamp__restart_server
}

__lamp__disable() {
  local domain="$1"
  if [[ ! -f "/etc/apache2/sites-available/$domain.conf" ]]; then
    echo "The \"$domain\" virtual host not exists."
    return
  fi
  if [[ ! -f "/etc/apache2/sites-enabled/$domain.conf" ]]; then
    echo "The \"$domain\" virtual host is not enabled."
    return
  fi
  rm -f "/etc/apache2/sites-enabled/$domain.conf"
  echo "The \"$domain\" virtual host is disabled."
  __lamp__restart_server
}

__lamp__toggle_status() {
  case "$1" in
  enable) __lamp__enable "$2" ;;
  disable) __lamp__disable "$2" ;;
  esac
}

__lamp__create() {
  local vhost domain database php_version
  local docroot="__VIRTUALHOSTS_DIRECTORY__"
  local create_database=false
  local create_php=false

  vhost="$1"
  shift # Remove the domain from the arguments.

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -D | --database)
      create_database=true
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        database="$2"
        shift
      fi
      ;;
    -P | --php)
      create_php=true
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        php_version="$2"
        shift
      fi
      [ -n "$php_version" ] || php_version="__PHP_VERSION__"
      if ! [[ "$php_version" =~ ^[0-9]\.[0-9]$ ]]; then
        echo "Invalid PHP format version, changeing to __PHP_VERSION__."
        php_version="__PHP_VERSION__"
      fi
      if ! [[ -f "/etc/php/$php_version/fpm/pool.d/user.conf" ]]; then
        echo "Missing PHP-FPM pool for $php_version version, skipping."
        return
      fi
      ;;
    esac
    shift
  done

  if ! __lamp__validate_domain "$vhost"; then
    echo "Invalid format for the $vhost domain."
    return
  fi

  if [[ -f "/etc/apache2/sites-enabled/$vhost.conf" ]]; then
    rm -f "/etc/apache2/sites-enabled/$vhost.conf"
    echo "Updating the \"$vhost\" virtual host."
  else
    echo "Creating the \"$vhost\" virtual host."
  fi

  # Normalize the DocumentRoot.
  docroot="${docroot%/}/$vhost"

  if [[ ! -d "$docroot" ]]; then
    echo "Creating the directory (DocumentRoot)."
    if ! mkdir "$docroot"; then
      echo "Failed to create the directory (DocumentRoot), skipping."
      return
    fi
  fi

  domain="$(awk -F'.' 'END{print $(NF-1)"."$NF}' <<<"$vhost")"

  mkcert create "$domain"
  if [[ ! -f "/opt/mkcert/certificates/$domain.pem" ]]; then
    echo "Missing $domain certificate, skipping."
    return
  fi

  if [[ $create_database == true ]]; then
    if [[ -z "$database" ]]; then
      database="$(awk -F'.' 'END{print $(NF-1)}' <<<"$domain")"
    fi
    echo "Create the \"$database\" database if not exists."
    mariadb -e "CREATE DATABASE IF NOT EXISTS \`$database\`;"
  fi

  cat <<EOF >"/etc/apache2/sites-available/$vhost.conf"
  <VirtualHost *:443>
    ServerName $vhost
    ServerAlias *.$vhost
    ServerAdmin "webmaster@$domain"
    DocumentRoot "$docroot"
    SSLCertificateFile "/opt/mkcert/certificates/$domain.pem"
EOF

  if [[ "$vhost" != "$domain" ]]; then
    echo "$vhost is a subdomain of $domain, removing the ServerAlias."
    sed -i "/.*ServerAlias.*/d" "/etc/apache2/sites-available/$vhost.conf"
  fi

  if [[ $create_php == true && "$php_version" != "__PHP_VERSION__" ]]; then
    cat <<EOF >>"/etc/apache2/sites-available/$vhost.conf"
    <Directory $docroot/>
      <FilesMatch ".+\.ph(ar|p|tml)$">
        SetHandler "proxy:unix:/run/php/php$php_version-fpm-user.sock|fcgi://localhost"
      </FilesMatch>
    </Directory>
EOF
  fi
  echo "</VirtualHost>" >>"/etc/apache2/sites-available/$vhost.conf"
  __lamp__enable "$vhost"
}

__lamp__delete() {
  local vhost domain database php_version

  vhost="$(__lamp__add_domain_tld "$1")"

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -D | --database)
      database="$vhost"
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        database="$2"
        shift
      fi
      ;;
    esac
    shift
  done

  if [[ ! -f "/etc/apache2/sites-available/$vhost.conf" ]]; then
    echo "The virtual host not exists, skipping."
    return
  fi

  domain="$(awk -F'.' 'END{print $(NF-1)"."$NF}' <<<"$vhost")"

  rm -f "/etc/apache2/sites-enabled/$vhost.conf"
  rm -f "/etc/apache2/sites-available/$vhost.conf"

  if [[ "$domain" == "$vhost" ]]; then
    mkcert delete "$domain"
  elif [[ -f "/etc/apache2/sites-available/$domain.conf" ]]; then
    echo "Skipping the certificate deletion because the $vhost is a subdomain of $domain."
  fi

  if [[ -n "$database" ]]; then
    if [[ "$database" == "$vhost" ]]; then
      database="$(awk -F'.' 'END{print $(NF-1)}' <<<"$vhost")"
    fi
    echo "Deleting the \"$database\" database if exists."
    mariadb -e "DROP DATABASE IF NOT EXISTS \`$database\`;" 2>&1 && echo "Executed without errors."
  fi

  echo "The virtual host configuration files were deleted."
  if [[ -z "$database" ]]; then
    echo "The database name was not defined, skipping the database deletion."
  fi
  echo "To avoid data loss, the domain directory is not deleted."
  __lamp__restart_server
}

__lamp__validate_domain() {
  [[ $# -gt 0 && "${#1}" -ge 1 && "${#1}" -le 254 && "$1" =~ ^[[:alnum:]]([[:alnum:]_\-]{1,61})?[[:alnum:]]\.[[:alpha:]]{2,}$ ]]
}

__lamp__add_domain_tld() {
  local domain="$1"
  if [[ -n "$domain" ]] && ! [[ "$domain" =~ \.__TLD__$ ]]; then
    domain+=".__TLD__"
  fi
  echo "$domain"
}

__lamp() {
  local cmd domain database
  local php_version="__PHP_VERSION__"
  local cmd_args=()

  # Parse the first argument as the command.
  case "${1:-help}" in
  create | delete | enable | disable | restart)
    cmd="$1"
    shift
    ;;
  list) __lamp__list ;;
  help) __lamp__help ;;
  esac

  if [[ -z "$cmd" ]]; then
    echo "Unknown command. Use 'lamp help' for usage."
    exit 1
  fi

  # Check and execute with sudo if not running with root privileges.
  if [[ "$(id -u)" -ne "0" ]]; then
    exec sudo lamp "$cmd" "$@"
  fi

  case "$cmd" in
  restart)
    # If no arguments are provided, set the default services.
    if [[ $# -eq 0 ]]; then
      set -- "php" "apache2" "mariadb" "mailpit" "coredns"
    fi
    __lamp__restart "$@"
    exit 0
    ;;
  *)
    if [[ $# -eq 0 ]]; then
      echo "No domain defined for the $cmd command."
      exit 1
    fi

    if [[ "$1" =~ ^- ]]; then
      echo "Arguments are positional, the domain must be the first argument."
      exit 1
    fi

    domain="$(__lamp__add_domain_tld "$1")"
    if ! __lamp__validate_domain "$domain"; then
      echo "Invalid format for the domain: $domain"
      exit 1
    fi

    if [[ "$cmd" =~ ^(enable|disable)$ ]]; then
      __lamp__toggle_status "$cmd" "$domain"
      exit 0
    fi
    shift # Remove the domain from the arguments.
    ;;
  esac

  # Parse and normalize the options.
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -D | --database)
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        database="$2"
        shift
      fi
      cmd_args+=("-D" "${database:-$domain}")
      ;;
    -P | --php)
      if [[ -n "$2" ]] && ! [[ "$2" =~ ^- ]]; then
        php_version="$2"
        shift
      fi
      cmd_args+=("-P" "$php_version")
      ;;
    *)
      echo "Unknown option. Use 'lamp help' for usage."
      exit 1
      ;;
    esac
    shift
  done

  # Update the arguments with default values if not set.
  set -- "$domain" "${cmd_args[@]}"

  case "$cmd" in
  create) __lamp__create "$@" ;;
  delete) __lamp__delete "$@" ;;
  esac
}

__lamp "$@"
