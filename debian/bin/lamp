#!/usr/bin/env bash

# Uncomment for debug
# set -x

# Usage: in_array string ${array[@]}
function in_array() {
  [ "$(printf '%s\n' "${@}" | grep -cx -- "${1}")" -gt "1" ] && return 0
  return 1
}

function validate_domain() {
  local domain="${1}"
  local regex="(?=^.{1,254}$)(^(?>(?:[\d+\.]+)?[a-z0-9_\-]{1,63}\.?)+(?:[a-z]{2,})$)"
  echo "${domain}" | grep -qP "${regex}" && return 0
  echo -e "\e[0;31mInvalid format for '${domain}' domain\e[0m"
  return 1
}

function show_domains() {
  local domain
  for domain in /etc/apache2/sites-available/*.conf; do
    domain="$(basename "${domain/.conf//}")"
    if [ -f "/etc/apache2/sites-enabled/$domain.conf" ]; then
      echo "- $domain (Enabled)"
    else
      echo "- $domain (Disabled)"
    fi
  done
}

function create_subdomain() {
  local domain
  local subdomain="${1}"

  domain="$(echo "${subdomain}" | sed -E 's/^[^\.]+\.//')"

  mkcert create "${domain}"

  sed -i 's/ServerAlias.*//' "/etc/apache2/sites-available/${subdomain}.conf"
  sed -i "s/webmaster.*/webmaster@${domain}/" "/etc/apache2/sites-available/${subdomain}.conf"
  sed -i "s@certificates.*@certificates/${domain}.pem@" "/etc/apache2/sites-available/${subdomain}.conf"
}

function create_domain() {
  local domain=""
  local database=""
  local php_version=""
  local with_db=no
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -db )
        with_db=yes
        shift
        ;;
      -php )
        if ! echo "${2:-}" | grep -qE '^[0-9]\.[0-9]$'; then
          echo -e "\e[0;31mInvalid format to define PHP version, using the default.\e[0m"
          exit 1
        fi
        if [[ ! -f "/etc/php/${2}/fpm/pool.d/user.conf" ]]; then
          echo -e "\e[0;31mThe PHP ${2} version is not installed, using the default.\e[0m"
        else
          php_version="${2}"
        fi
        shift
        ;;
      * )
        break
        ;;
    esac
  done

  if [[ -z "${1:-}" ]] || [[ "${1:0:1}" == "-" ]]; then
    echo -e "\e[0;31minvalid format of the arguments\e[0m"
    exit 1
  fi

  domain="$1"
  database="$1"
  if echo "$domain" | grep -q "@"; then
    database="$(echo "$domain" | awk -F "@" '{print $2}')"
    domain="$(echo "$domain" | awk -F "@" '{print $1}')"
  fi

  domain="$domain.LAMP_TLD"
  if validate_domain "$domain"; then
      cat <<EOF > "/etc/apache2/sites-available/$domain.conf"
<VirtualHost *:443>
  ServerName $domain
  ServerAlias *.$domain
  ServerAdmin "webmaster@$domain"
  DocumentRoot "/VIRTUALHOSTS_DIR/$domain"
  SSLCertificateFile "/opt/mkcert/certificates/$domain.pem"
EOF
    if [[ -n "$php_version" ]]; then
      cat <<EOF >> "/etc/apache2/sites-available/$domain.conf"
  <Directory /VIRTUALHOSTS_DIR/$domain/>
    <FilesMatch ".+\.ph(ar|p|tml)$">
      SetHandler "proxy:unix:/run/php/php$php_version-fpm-user.sock|fcgi://localhost"
    </FilesMatch>
  </Directory>
EOF
    fi
    echo "</VirtualHost>" >> "/etc/apache2/sites-available/$domain.conf"
    if [[ "$(echo "$domain" | awk -F'.' 'END{print NF}')" -eq "2" ]]; then
      mkcert create "$domain"
    else
      create_subdomain "$domain"
    fi
    enable_domain "$domain"
    if [[ "$with_db" == "yes" ]] && [[ -n "${database}" ]]; then
      mysql -e "CREATE DATABASE IF NOT EXISTS $database;"
    fi

    RESTART_APACHE=yes
  fi
  shift
  if [[ $# -gt 0 ]]; then
    create_domain "$@"
  fi
}

function delete_domain() {
  local domain=""
  local database=""
  local with_db=no

  if [[ "$1" == "-db" ]]; then
    with_db="yes"
    shift
  fi

  domain="$1"
  database="$1"
  if echo "$1" | grep -q "@"; then
    domain="$(echo "$1" | awk -F "@" '{print $1}')"
    database="$(echo "$1" | awk -F "@" '{print $2}')"
  fi

  domain="$domain.LAMP_TLD"
  if validate_domain "$domain"; then
    find /etc/apache2/sites-* -name "$domain.conf" -delete;
    if [[ "$(echo "$domain" | awk -F'.' 'END{print NF}')" -ne "2" ]]; then
      domain=$(echo "$domain" | sed -E 's/^[^\.]+\.//')
    fi

    if [[ "$(find /etc/apache2/sites-available -name "*$domain.conf" | wc -l)" -eq "0" ]]; then
      mkcert delete "$domain"
    fi

    RESTART_APACHE=yes
    if [[ "$with_db" == "yes" ]] && [[ -n "${database}" ]]; then
      mysql -e "DROP DATABASE IF EXISTS $database;"
    fi
  fi
  shift
  if [[ $# -gt 0 ]]; then
    delete_domain "$@"
  fi
}

function enable_domain() {
  local domain
  while [[ $# -gt 0 ]]; do
    domain="$1"
    if ! echo "$domain" | grep -qE "\.LAMP_TLD$"; then
      domain="$domain.LAMP_TLD"
    fi
    if validate_domain "$domain" && [[ -f "/etc/apache2/sites-available/$domain.conf" ]]; then
      mkdir -p "/VIRTUALHOSTS_DIR/$domain"
      ln -sf "/etc/apache2/sites-available/$domain.conf" "/etc/apache2/sites-enabled/$domain.conf"
      RESTART_APACHE=yes
    fi
    shift
  done
}

function disable_domain() {
  local domain
  while [[ "$#" -gt "0" ]]; do
    domain="$1"
    if ! echo "$domain" | grep -qE "\.LAMP_TLD$"; then
      domain="$domain.LAMP_TLD"
    fi
    if validate_domain "$domain"; then
      if [[ -f "/etc/apache2/sites-enabled/$domain.conf" ]]; then
        rm -f "/etc/apache2/sites-enabled/$domain.conf"
        RESTART_APACHE=yes
      else
        echo "The $domain domain is already disabled"
      fi
    fi
    shift
  done
}

function usage() {
  echo "Usage: lamp [help|show]"
  echo "       sudo lamp restart service ..."
  echo "       sudo lamp [options] domain@database domain ..."
  echo
  echo "OPTIONS:"
  echo " restart - Restart all services or service if defined"
  echo "           Since the service name for php is unique for each version"
  echo "           you can specify php as the service name and all will be restarted."
  echo "           Also support multiples services."
  echo " create  - Create or recreate if exists the VirtualHost for domain"
  echo "    -db  -- Creates a database, if not specified the domain is used"
  echo "   -php  -- Define the php version to use, if not installed use the default version."
  echo " delete  - Delete the VirtualHost for domain"
  echo "    -db  -- Delete the database, if you do not specify it used the domain."
  echo " enable  - Enable the VirtualHost for domain"
  echo " disable - Disable the VirtualHost for domain"
  echo " show    - List all VirtualHosts"
  echo " help    - Print this text and exit"
  echo
  echo "* When a command has options, they must be specified per domain."
  echo "* The domain cannot contain the TLD, the previously configured TLD is automatically included."
  echo "* Use \"/VIRTUALHOSTS_DIR/domain.LAMP_TLD\" for the DocumentRoot and create the directory if not exists."
  echo "* You can create separate subdomains but because the mkcert does not support it, the certificate will be created for the domain."
}

function restart_service() {
  local name
  if ! [[ "$#" -gt "0" ]]; then
    restart_service php mailhog mysql apache2
    return 0
  fi
  while [[ "$#" -gt "0" ]]; do
    if [[ "php" == "$1" ]]; then
      for name in /lib/systemd/system/php*fpm.service; do
        restart_service "$(basename "$name")"
      done
    else
      systemctl restart "$1"
    fi
    shift
  done
}

ACTION=help
ACTIONS=(
  "restart"
  "create"
  "delete"
  "enable"
  "disable"
  "show"
  "help"
)

if in_array "${1:-help}" "${ACTIONS[@]}"; then
  ACTION="${1}"
  shift
fi

if [[ "$ACTION" == "help" ]]; then
  usage
elif [[ "$ACTION" == "show" ]]; then
  show_domains
elif [[ "$(id -u)" -ne "0" ]]; then
  echo "Please, run this with the root user or sudo."
elif [[ "$ACTION" == "restart" ]]; then
  restart_service "$@"
elif [[ $# -gt 0 ]]; then
  "${ACTION}_domain" "$@"
  [ -n "$RESTART_APACHE" ] && restart_service php apache2
fi
