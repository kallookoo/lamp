#!/usr/bin/env bash

export CAROOT=/opt/mkcert/share
MKCERT_DIRECTORY=/opt/mkcert/certificates

# Usage: in_array string ${array[@]}
function in_array() {
  [ "$(printf '%s\n' "${@}" | grep -cx -- "${1}")" -gt "1" ] && return 0
  return 1
}

# Simple validator for domains
# to prevent use wildcards or subdomains
# this command always create wildcard certificate
function validate_domain() {
  local domain="${1}"
  echo "${domain}" | grep -qP "^[\w\-]+\.[\w]+$" && return 0
  echo -e "\e[0;31mInvalid format for '${domain}' domain\e[0m"
  return 1
}

function usage() {
    echo "Usage: sudo mkcert [option] domain.tld..."
    echo
    echo "* This command join pem and key generated by mkcert on single file."
    echo "* All certificates saved to ${MKCERT_DIRECTORY}"
    echo "* The generate certificate always support wildcards"
    echo
    echo "OPTIONS:"
    echo " create  - Create or update if exists the certificates for domain.tld"
    echo " delete  - Delete the certificates for domain.tld"
    echo " show    - List all created certificates"
    echo " help    -  Print this text and exit"
    echo " upgrade - Upgrade the mkcert binary to latest version"
}

function upgrade_binary() {
  local api_url="https://api.github.com/repos/FiloSottile/mkcert/releases/latest"
  local arch="$(uname -r | awk -F'-' '{print $(NF)}')"
  local download_url="$(wget -q -O- "${api_url}" | grep -m 1 "browser_download_url.*linux-${arch}" | cut -d '"' -f 4)"
  local binary_name="$(echo "${download_url}" | awk -F'/' '{print $(NF)}')"

  echo "Upgrading the mkcert binary"
  if [[ -z "${binary_name}" ]]; then
    echo "Some problem occurred while querying the api to download the binary."
  elif [ ! -f "/opt/mkcert/bin/${binary_name}" ]; then
    mkdir -p /opt/mkcert/bin
    find /opt/mkcert/bin -iname "*mkcert*" -delete
    wget -q "${download_url}" -O "/opt/mkcert/bin/${binary_name}"
    chmod +x "/opt/mkcert/bin/${binary_name}"
    "/opt/mkcert/bin/${binary_name}" --help &>/dev/null
    if [[ "$?" -ne "0" ]]; then
      echo "Some problem occurred while downloading the binary."
    else
       ln -sf "/opt/mkcert/bin/${binary_name}" /opt/mkcert/bin/current
        if [[ ! -d "/opt/mkcert/share" ]]; then
          /opt/mkcert/bin/current -install &>/dev/null
        fi
    fi
  fi
}

ACTION="help"
ACTIONS=(
  "create"
  "delete"
  "upgrade"
  "help"
  "show"
)

if in_array "${1:-empty}" "${ACTIONS[@]}"; then
  ACTION="${1}"
  shift
fi

if [[ "$ACTION" == "help" ]]; then
  usage
elif [[ "$ACTION" == "show" ]]; then
  if [ -d "$MKCERT_DIRECTORY" ]; then
    find "$MKCERT_DIRECTORY" -maxdepth 1 -type f | awk -F"/" '{print "- "$NF}'
  fi
elif [[ "$(id -u)" -ne "0" ]]; then
  echo "Please, run this with the root user or sudo."
elif [[ "$ACTION" == "upgrade" ]]; then
  upgrade_binary
elif [[ "$#" -gt "0" ]]; then
  mkdir -p "${MKCERT_DIRECTORY}"
  while [[ "$#" -gt "0" ]]; do
    if validate_domain "${1}"; then
      if [[ "$ACTION" == "create" ]]; then
        echo "Creating ${1} domain certificate"
        if /opt/mkcert/bin/current -ecdsa -cert-file "${MKCERT_DIRECTORY}/${1}.pem" -key-file "${MKCERT_DIRECTORY}/${1}.key" "${1}" "*.${1}" &>/dev/null; then
          tee -a "${MKCERT_DIRECTORY}/${1}.key" &>/dev/null < "${MKCERT_DIRECTORY}/${1}.pem"
          mv "${MKCERT_DIRECTORY}/${1}.key" "${MKCERT_DIRECTORY}/${1}.pem"
        fi
      elif [[ "$ACTION" == "delete" ]]; then
        echo "Deleting ${1} domain certificate"
        rm -f "${MKCERT_DIRECTORY}/${1}.pem"
      fi
    fi
    shift
  done
fi
