#!/usr/bin/env bash

export CAROOT=/opt/mkcert/share
MKCERT_DIRECTORY=/opt/mkcert/certificates

# Usage: in_array string ${array[@]}
function in_array() {
  [ "$(printf '%s\n' "${@}" | grep -cx -- "${1}")" -gt "1" ] && return 0
  return 1
}

# Simple validator for domains
# to prevent use wildcards or subdomains
# this command always create wildcard certificate
function is_valid_domain() {
  local domain="${1}"
  echo "${domain}" | grep -qP "^[\w\-]+\.[\w]+$" && return 0
  echo -e "\e[0;31mInvalid format for '${domain}' domain\e[0m"
  return 1
}

function usage() {
    echo "Usage: sudo mkcert [option] domain.tld..."
    echo
    echo "* This command join pem and key generated by mkcert on single file."
    echo "* All certificates saved to ${MKCERT_DIRECTORY}"
    echo "* The generate certificate always support wildcards"
    echo
    echo "OPTIONS:"
    echo " create  - Create or update if exists the certificates for domain.tld"
    echo " delete  - Delete the certificates for domain.tld"
    echo " show    - List all created certificates"
    echo " help    - Print this text and exit"
    echo " upgrade - Upgrade the mkcert binary to latest version"
    echo " version - Print the mkcert version"
}

function upgrade_binary() {
  if [ -f /opt/mkcert/bin/current ]
  then
    echo "Upgrading the mkcert binary"
  else
    echo "Installing the mkcert binary"
  fi

  mkdir -p /opt/mkcert/bin
  wget -q "https://dl.filippo.io/mkcert/latest?for=linux/$(uname -r | awk -F'-' '{print $(NF)}')" -O /opt/mkcert/bin/latest
  chmod +x /opt/mkcert/bin/latest
  if ! /opt/mkcert/bin/latest --help 2>&1 | grep -q 'CAROOT'
  then
    echo "Some problem occurred while downloading the mkcert binary."
  else
    mv /opt/mkcert/bin/latest /opt/mkcert/bin/current
    if [[ ! -d /opt/mkcert/share ]]
    then
      /opt/mkcert/bin/current -install &>/dev/null
    fi
  fi
}

ACTION="help"
ACTIONS=(
  "create"
  "delete"
  "upgrade"
  "help"
  "show"
  "version"
)

if in_array "${1:-empty}" "${ACTIONS[@]}"
then
  ACTION="${1}"
  shift
fi

if [[ "$ACTION" == "help" ]]
then
  usage
elif [[ "$ACTION" == "version" ]]
then
  /opt/mkcert/bin/current --version
elif [[ "$ACTION" == "show" ]]
then
  if [[ -d "$MKCERT_DIRECTORY" ]]
  then
    find "$MKCERT_DIRECTORY" -maxdepth 1 -type f | awk -F"/" '{print "- "$NF}'
  fi
elif [[ "$(id -u)" -ne "0" ]]
then
  echo "Please, run this with the root user or sudo."
elif [[ "$ACTION" == "upgrade" ]]
then
  upgrade_binary
else
  while [[ "$#" -gt "0" ]]
  do
    if is_valid_domain "${1}"
    then
      if [[ "$ACTION" == "create" ]]
      then
        echo "Creating ${1} domain certificate"
        if /opt/mkcert/bin/current -ecdsa -cert-file "${MKCERT_DIRECTORY}/${1}.pem" -key-file "${MKCERT_DIRECTORY}/${1}.key" "${1}" "*.${1}" &>/dev/null
        then
          cat "${MKCERT_DIRECTORY}/${1}.key" "${MKCERT_DIRECTORY}/${1}.pem" | tee "${MKCERT_DIRECTORY}/${1}.pem" &>/dev/null
        fi
      elif [[ "$ACTION" == "delete" ]]
      then
        echo "Deleting ${1} domain certificate"
        rm -f "${MKCERT_DIRECTORY}/${1}.pem"
      fi
    fi
    shift
  done
fi
