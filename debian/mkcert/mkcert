#!/usr/bin/env bash

export CAROOT=/opt/mkcert/share
MKCERT_DIRECTORY=/opt/mkcert/certificates

# Usage: in_array string ${array[@]}
function in_array() {
  if [ "$(printf '%s\n' "${@}" | grep -cx -- "${1}")" -gt "1" ]
  then
    return 0
  fi
  return 1
}

# Simple validator for domains
# to prevent use wildcards or subdomains
# this command always create wildcard certificate
function is_valid_domain() {
  local domain="${1}"
  if echo "${domain}" | grep -qP "^[\w\-]+\.[\w]+$"
  then
    return 0
  fi
  echo "Invalid format for '${domain}' domain"
  return 1
}

function usage() {
    echo "Usage: sudo mkcert [option] domain.tld..."
    echo
    echo "* This command join key and pem files generated by mkcert on single file"
    echo "  to use in SSLCertificateFile ( Apache Directive )"
    echo "* The certificates are always willcards and"
    echo "  saved to ${MKCERT_DIRECTORY}"
    echo
    echo "OPTIONS:"
    echo " create  - Create or update if exists the certificates for domain.tld"
    echo " delete  - Delete the certificates for domain.tld"
    echo " help    - Print this text and exit"
    echo " show    - List all created certificates"
    echo " upgrade - Upgrade the mkcert binary to latest version"
    echo " version - Print the mkcert version"
}

function upgrade_binary() {
  local action="Installing"
  [ -f /opt/mkcert/bin/current ] && action="Upgrading"
  echo "${action} the mkcert binary"

  mkdir -p /opt/mkcert/bin
  if wget -q "https://dl.filippo.io/mkcert/latest?for=linux/$(uname -r | awk -F'-' '{print $(NF)}')" -O /opt/mkcert/bin/latest
  then
    chmod +x /opt/mkcert/bin/latest
    # Recheck for security
    if /opt/mkcert/bin/latest --help 2>&1 | grep -q 'CAROOT'
    then
      mv /opt/mkcert/bin/latest /opt/mkcert/bin/current
      if [[ ! -d "${CAROOT}" ]] || [[ ! -f "${CAROOT}/rootCA-key.pem" ]] || [[ ! -f "${CAROOT}/rootCA.pem" ]]
      then
        rm -rf "${CAROOT}"
        find /etc/ssl/certs/ -name "*mkcert*" -delete
        /opt/mkcert/bin/current -install &>/dev/null
        mkdir -p /etc/ssl
        wget -q https://curl.se/ca/cacert.pem -O /etc/ssl/cacert.pem
        find /etc/ssl/certs/ -name "*mkcert*" -exec cat {} \; >> /etc/ssl/cacert.pem
      fi
      return 0
    fi
  fi
  echo "Some problem occurred while downloading the mkcert binary."
}

ACTION="help"
ACTIONS=(
  "create"
  "delete"
  "help"
  "show"
  "upgrade"
  "version"
)

if in_array "${1:-empty}" "${ACTIONS[@]}"
then
  ACTION="${1}"
  shift
fi

if [[ "$ACTION" == "help" ]]
then
  usage
elif [[ "$ACTION" == "version" ]]
then
  /opt/mkcert/bin/current --version
elif [[ "$ACTION" == "show" ]]
then
  if [[ -d "$MKCERT_DIRECTORY" ]]
  then
    find "$MKCERT_DIRECTORY" -maxdepth 1 -type f | awk -F"/" '{print "- "$NF}'
  fi
elif [[ "$(id -u)" -ne "0" ]]
then
  echo "Please, run this with the root user or sudo."
elif [[ "$ACTION" == "upgrade" ]]
then
  upgrade_binary
elif [[ "$#" -gt "0" ]]
then
  while [[ "$#" -gt "0" ]]
  do
    CURRENT_DOMAIN="${1}"
    if is_valid_domain "${CURRENT_DOMAIN}"
    then
      PEM_FILE="${MKCERT_DIRECTORY}/${CURRENT_DOMAIN}.pem"
      KEY_FILE="${MKCERT_DIRECTORY}/${CURRENT_DOMAIN}.key"
      if [[ "$ACTION" == "create" ]]
      then
        if [[ ! -f "${PEM_FILE}" ]]
        then
          echo "Creating ${CURRENT_DOMAIN} domain certificate"
        else
          echo "Updating ${CURRENT_DOMAIN} domain certificate"
        fi
        if /opt/mkcert/bin/current -ecdsa -cert-file "${PEM_FILE}" -key-file "${KEY_FILE}" "${CURRENT_DOMAIN}" "*.${CURRENT_DOMAIN}" &>/dev/null
        then
          cat "${KEY_FILE}" "${PEM_FILE}" | tee "${PEM_FILE}" &>/dev/null
        fi
      elif [[ "$ACTION" == "delete" ]]
      then
        if [[ -f "${PEM_FILE}" ]] || [[ -f "${KEY_FILE}" ]]
        then
          echo "Deleting ${CURRENT_DOMAIN} domain certificate"
          find "${MKCERT_DIRECTORY}/" -name "*${CURRENT_DOMAIN}*" -delete
        else
          echo "Missing ${CURRENT_DOMAIN} domain certificate"
        fi
      fi
    fi
    shift
  done
else
  usage
fi
