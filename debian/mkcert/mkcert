#!/usr/bin/env bash

export CAROOT=/opt/mkcert/share
MKCERT_DIRECTORY=/opt/mkcert/certificates

# Usage: in_array string ${array[@]}
function in_array() {
  [ `printf '%s\n' "${@}" | grep -cx -- "${1}"` -gt 1 ] && return 0
  return 1
}

# Simple validator for domains
# to prevent use wildcards or subdomains
# this command always create wildcard certificate
function validate_domain() {
  echo $1 | grep -qP "^[\w\-]+\.[\w]+$"
  [ $? -eq 0 ] && return 0 || echo -e "\e[0;31mInvalid format for '${1}' domain\e[0m"; return 1
}

function usage() {
    echo "Usage: sudo mkcert [option] domain.tld..."
    echo
    echo "* This command join pem and key generated by mkcert on single file."
    echo "* All certificates saved to ${MKCERT_DIRECTORY}"
    echo "* The generate certificate always support wildcards"
    echo
    echo "OPTIONS:"
    echo " create  - Create or update if exists the certificates for domain.tld"
    echo " delete  - Delete the certificates for domain.tld"
    echo " show    - List all created certificates"
    echo " help    -  Print this text and exit"
    echo " upgrade - Upgrade the mkcert binary to latest version"
    exit
}

function show() {
  if [ -d "$MKCERT_DIRECTORY" ]; then
    ls ${MKCERT_DIRECTORY} | awk '{print "- "$0}'
  fi
  exit
}

ACTION=help
ACTIONS=(
  create
  delete
  upgrade
  help
  show
)

[ $# -gt 0 ] || usage
if validate_domain "${1}" &>/dev/null; then
  ACTION=create
elif in_array "${1}" ${ACTIONS[@]}; then
  ACTION="${1}"
  shift
fi

[ "$ACTION" == "help" ] && usage
[ "$ACTION" == "show" ] && show

if [ `id -u` -ne 0 ]; then
  echo "Please, run this with the root user or sudo."
  exit 1
fi

if [ "$ACTION" == "upgrade" ]; then
  [ -d /opt/mkcert ] && echo -n "Upgrading" || echo -n "Installing"
  echo " the mkcert binary"
  LAMP_MKCERT_URL=`wget -q -O- "https://api.github.com/repos/FiloSottile/mkcert/releases/latest" | grep -m 1 "browser_download_url.*linux-$(uname -r | awk -F'-' '{print $(NF)}')" | cut -d '"' -f 4`
  LAMP_MKCERT=`echo $LAMP_MKCERT_URL | awk -F'/' '{print $(NF)}'`
  if [ -z "$LAMP_MKCERT" ]; then
    echo "Some problem occurred when trying to get the mkcert binary."
    exit 1
  elif [ ! -f "/opt/mkcert/bin/$LAMP_MKCERT" ]; then
    mkdir -p /opt/mkcert/bin
    find /opt/mkcert/bin -iname "*mkcert*" -delete
    wget -q "$LAMP_MKCERT_URL" -O "/opt/mkcert/bin/$LAMP_MKCERT"
    chmod +x "/opt/mkcert/bin/$LAMP_MKCERT"
  fi
  ln -sf "/opt/mkcert/bin/$LAMP_MKCERT" /opt/mkcert/bin/current
  [ -d "/opt/mkcert/share" ] || /opt/mkcert/bin/current -install &>/dev/null
  exit
fi

[ -d "${MKCERT_DIRECTORY}" ] || mkdir -p "${MKCERT_DIRECTORY}"
if [ "$ACTION" == "delete" ]; then
  while [ $# -gt 0 ]; do
    DOMAIN="${1}"
    if validate_domain "${DOMAIN}"; then
      echo -n "Deleting "${DOMAIN}" domain certificate"
      find ${MKCERT_DIRECTORY} -type f -name "${DOMAIN}*" -delete 2>/dev/null
      [ $? -eq 0 ] && echo -e " \e[0;32m[DONE]\e[0m" || echo -e " \e[0;31m[FAILED]\e[0m"
    fi
    shift
  done
elif [ "$ACTION" == "create" ]; then
  while [ $# -gt 0 ]; do
    DOMAIN="${1}"
    if validate_domain "${DOMAIN}"; then
      echo -n "Creating "${DOMAIN}" domain certificate"
      /opt/mkcert/bin/current -ecdsa -cert-file "${MKCERT_DIRECTORY}/${DOMAIN}.pem" -key-file "${MKCERT_DIRECTORY}/${DOMAIN}.key" "${DOMAIN}" "*.${DOMAIN}" &>/dev/null
      if [[ $? -eq 0 ]]; then
        cat "${MKCERT_DIRECTORY}/${DOMAIN}.pem" | tee -a "${MKCERT_DIRECTORY}/${DOMAIN}.key" &>/dev/null
        mv "${MKCERT_DIRECTORY}/${DOMAIN}.key" "${MKCERT_DIRECTORY}/${DOMAIN}.pem"
        echo -e " \e[0;32m[DONE]\e[0m"
      else
        echo -e " \e[0;31m[FAILED]\e[0m"
      fi
    fi
    shift
  done
fi
